buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.1.2'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    classpath 'com.github.dcendents:android-maven-plugin:1.2'
  }
}

apply plugin: 'com.android.library'

android {
  compileSdkVersion 21
  buildToolsVersion "21.1.2"

  defaultConfig {
    minSdkVersion 14
      targetSdkVersion 21
      versionCode 1
      versionName "1.0"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile 'com.android.support:appcompat-v7:21.0.3'
}

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = 'com.github.hotchpotch'
version = '0.1.0'
def siteUrl = 'https://github.com/hotchpotch/IconicFontEngine-android'
def gitUrl = siteUrl + '.git'

bintray {
  user = project.has('bintray_user') ? project['bintray_user'] : ''
  key = project.has('bintray_api_key') ? project['bintray_api_key'] : ''

  configurations = ['archives'] //When uploading configuration files
  pkg {
    repo = 'maven'
    name = 'IconicFontEngine'
    desc = 'Iconic Fonts on Android TextView ...'
    websiteUrl = siteUrl
    issueTrackerUrl = siteUrl + '/issues'
    vcsUrl = gitUrl
    licenses = ['Apache-2.0']
    labels = ['android']
    publicDownloadNumbers = true
  }
}

install {
  repositories.mavenInstaller {
    pom {
      project {
        packaging 'aar'
        name 'IconicFontEngine'
        url siteUrl
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id 'hotchpotch'
            name 'Yuichi Tateno'
            email 'hotchpotch@gmail.com'
          }
        }
        scm {
          connection gitUrl
          developerConnection gitUrl
          url siteUrl
        }
      }
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}
artifacts {
  archives javadocJar
  archives sourcesJar
}

task findConventions << {
  println project.getConvention()
}
